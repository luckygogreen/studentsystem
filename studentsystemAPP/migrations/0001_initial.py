# Generated by Django 2.2.7 on 2019-12-04 21:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('addr', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Classlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.PositiveSmallIntegerField(verbose_name='学期')),
                ('class_type', models.PositiveSmallIntegerField(choices=[(0, '面授(周末)'), (1, '网络(全天)'), (1, '网络(周末)'), (2, '面授(全天)')], verbose_name='授课类型')),
                ('startdate', models.DateField(verbose_name='开课日期')),
                ('enddate', models.DateField(verbose_name='结课日期')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Branch', verbose_name='分校区')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('price', models.PositiveSmallIntegerField()),
                ('period', models.PositiveSmallIntegerField(verbose_name='周期(月)')),
                ('outline', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CourseRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daynumber', models.PositiveSmallIntegerField(verbose_name='第几天课')),
                ('outline', models.TextField(verbose_name='本节课内容')),
                ('homework', models.BooleanField(default=True, verbose_name='是否有作业')),
                ('homework_title', models.CharField(blank=True, max_length=128, null=True, verbose_name='作业标题')),
                ('homework_content', models.TextField(blank=True, null=True, verbose_name='作业内容')),
                ('data', models.DateField(auto_now_add=True)),
                ('fromclass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Classlist', verbose_name='关联的班级')),
            ],
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
                ('phone', models.CharField(max_length=64, unique=True)),
                ('wechatorother', models.CharField(blank=True, max_length=64, null=True)),
                ('source', models.SmallIntegerField(choices=[(0, '转介绍'), (1, 'Google'), (2, 'Facebook'), (3, 'Twitter'), (4, '其他互联网'), (5, '机构合作')])),
                ('referral_from', models.CharField(blank=True, max_length=64, null=True, verbose_name='转介绍电话')),
                ('cousult_content', models.TextField(verbose_name='咨询详情')),
                ('momo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('consult_course', models.ForeignKey(on_delete='models.CASCADE', to='studentsystemAPP.Course', verbose_name='所咨询课程')),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_aggrement', models.BooleanField(default=False, verbose_name='学员是否同意学校条款')),
                ('contract_approved', models.BooleanField(default=False, verbose_name='学校是否审核学生申请')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagname', models.CharField(max_length=64, unique=True, verbose_name='标签名称')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('role', models.ManyToManyField(to='studentsystemAPP.Role')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance', models.SmallIntegerField(choices=[(0, '已签到'), (1, '迟到'), (2, '缺勤'), (3, '早退')], default=0)),
                ('score', models.SmallIntegerField(choices=[(100, 'A+'), (90, 'A'), (85, 'B+'), (80, 'B'), (75, 'B-'), (70, 'C+'), (65, 'C'), (60, 'C-'), (-10, 'D+'), (-20, 'D'), (-30, 'D-'), (-100, 'Copy'), (0, 'N/A')])),
                ('memo', models.TextField(blank=True, null=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('course_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.CourseRecord')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Enrollment')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField(verbose_name='缴费数额')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.UserProfile')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Course', verbose_name='所报课程')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Customers')),
            ],
        ),
        migrations.AddField(
            model_name='enrollment',
            name='consultant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.UserProfile', verbose_name='课程顾问'),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Customers', verbose_name='对应客户'),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='enrolled_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Classlist', verbose_name='所报课程'),
        ),
        migrations.AddField(
            model_name='customers',
            name='cunsultant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.UserProfile', verbose_name='接待销售'),
        ),
        migrations.AddField(
            model_name='customers',
            name='tags',
            field=models.ManyToManyField(to='studentsystemAPP.Tags'),
        ),
        migrations.CreateModel(
            name='CustomerFollowUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='跟进内容')),
                ('intention', models.SmallIntegerField(choices=[(0, '2周内报名'), (1, '一个月内报名'), (2, '近期无报名计划'), (3, '已在其他机构报名'), (4, '已拉黑'), (5, '已报名')], verbose_name='跟进进度')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='跟进时间')),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.UserProfile', verbose_name='跟进人')),
                ('customers', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Customers', verbose_name='被跟进客户')),
            ],
        ),
        migrations.AddField(
            model_name='courserecord',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.UserProfile', verbose_name='授课老师'),
        ),
        migrations.AddField(
            model_name='classlist',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studentsystemAPP.Course', verbose_name='课程'),
        ),
        migrations.AddField(
            model_name='classlist',
            name='teacher',
            field=models.ManyToManyField(to='studentsystemAPP.UserProfile', verbose_name='授课老师'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('customer', 'enrolled_class')},
        ),
        migrations.AlterUniqueTogether(
            name='courserecord',
            unique_together={('fromclass', 'daynumber')},
        ),
        migrations.AlterUniqueTogether(
            name='classlist',
            unique_together={('branch', 'course', 'semester')},
        ),
    ]
